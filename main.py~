import asyncio
import hashlib
import logging
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types.callback_query import CallbackQuery

logging.basicConfig(level=logging.INFO)

url_storage = {}

# Bot token
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
if not TELEGRAM_BOT_TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN environment variable is not set")

bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

class callback_data_factory(CallbackData, prefix="action"):
    """Callback data factory."""
    action: str
    url_hash: str
    type: str

# Utility functions
def hash_url(url: str) -> str:
    """Hash the URL to make it safe for callback data."""
    return hashlib.md5(url.encode()).hexdigest()

async def run_command(command: str, *args: str):
    """Run external command asynchronously."""
    process = await asyncio.create_subprocess_exec(
        command, *args,
        stdout=asyncio.subprocess.PIPE,
        stderr=asyncio.subprocess.PIPE
    )
    stdout, stderr = await process.communicate()

    if process.returncode != 0:
        raise RuntimeError(f"Command {command} failed with error: {stderr.decode()}")
    return stdout.decode()

async def download_video(url: str):
    """Download video using yt-dlp."""
    original_file = "original_video.mp4"
    output_file = "video.mp4"

    await run_command("yt-dlp", "-o", original_file, url)
    await run_command(
        "ffmpeg", "-i", original_file, "-c:v", "libx264", "-preset", "fast",
        "-c:a", "aac", "-b:a", "128k", "-movflags", "+faststart", output_file
    )
    os.remove(original_file)
    return output_file

async def extract_audio(video_file: str):
    """Extract audio from video."""
    audio_file = "audio.mp3"
    await run_command("ffmpeg", "-i", video_file, "-q:a", "0", "-map", "a", audio_file)
    return audio_file

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """Handle /start command."""
    await message.answer(
        "Привет! Отправьте ссылку на видео, и я помогу скачать его или извлечь аудио.",
    )

@dp.message(F.text)
async def handle_url(message: types.Message):
    """Handle messages with URLs."""
    url = message.text.strip()
    if not url.startswith("http"):
        await message.answer("Пожалуйста, отправьте правильную ссылку на видео.")
        return

    url_hash = hash_url(url)
    url_storage[url_hash] = url

    callback_buttons = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="Скачать видео",
                callback_data=callback_data_factory(
                    action="download", url_hash=url_hash, type="video"
                ).pack()
            ),
            InlineKeyboardButton(
                text="Скачать аудио",
                callback_data=callback_data_factory(
                    action="download", url_hash=url_hash, type="audio"
                ).pack()
            )
        ]
    ])
    await message.answer("Что вы хотите сделать?", reply_markup=callback_buttons)

@dp.callback_query(callback_data_factory.filter())
async def handle_download(callback_query: CallbackQuery, callback_data: callback_data_factory):
    """Handle download options."""
    action_type = callback_data.type
    url_hash = callback_data.url_hash

    url = url_storage.get(url_hash)
    if not url:
        await callback_query.message.answer("Ошибка: ссылка не найдена.")
        return

    await callback_query.message.edit_text("Обработка началась, пожалуйста, подождите...")

    try:
        if action_type == "video":
            video_file = await download_video(url)
            await bot.send_document(callback_query.from_user.id, types.FSInputFile(video_file))
            os.remove(video_file)
        elif action_type == "audio":
            video_file = await download_video(url)
            audio_file = await extract_audio(video_file)
            await bot.send_document(callback_query.from_user.id, types.FSInputFile(audio_file))
            os.remove(video_file)
            os.remove(audio_file)
    except Exception as e:
        await callback_query.message.answer(f"Произошла ошибка: {e}")

    await callback_query.answer()

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
