from aiogram import Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import Message, CallbackQuery, FSInputFile
from services.delete_file import delete_file
from services.instagram import download_instagram_video
from services.instagram import extract_audio_from_video
from services.youtube import get_youtube_info, download_youtube_audio, download_youtube_video

from bot.services.instagram import normalize_instagram_url

router = Router()
urls = {}


@router.message(lambda msg: "http" in msg.text)
async def handle_download_request(message: Message, bot: Bot, state: FSMContext):
    url = message.text.strip()
    if "youtube.com" in url or "youtu.be" in url:
        yt_info = get_youtube_info(url)
        if yt_info:
            duration = yt_info.get('duration', 0)

            if duration > 300:
                await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–∏–¥–µ–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç).")
                return

            buttons = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(text="üîä –¢–æ–ª—å–∫–æ –∞—É–¥–∏–æ", callback_data=f"yt_audio|{url}"),
                        InlineKeyboardButton(text="üé• –í–∏–¥–µ–æ", callback_data=f"yt_video|{url}"),
                    ]
                ]
            )
            await message.reply(
                f"–í–∏–¥–µ–æ –Ω–∞–π–¥–µ–Ω–æ: {yt_info['title']}\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=buttons,
            )
        else:
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
    elif "instagram.com" in url:
        short_url = hash(url) % (10 ** 8)

        normalized_url = normalize_instagram_url(url)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data({str(short_url): normalized_url})

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        buttons = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì• –°–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ",
                        callback_data=f"inst_video|{short_url}"
                    ),
                    InlineKeyboardButton(
                        text="üéµ –°–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ",
                        callback_data=f"inst_audio|{short_url}"
                    ),
                ]
            ]
        )

        await message.reply("–í–∏–¥–µ–æ –∏–∑ Instagram –Ω–∞–π–¥–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=buttons)
    else:
        await message.answer("–ü—Ä–æ—Å—Ç–æ —Å–∫–∏–Ω—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ Instagram –∏–ª–∏ YouTube.")


@router.callback_query(lambda call: call.data.startswith("yt_audio"))
async def handle_youtube_audio(call: CallbackQuery):
    _, url = call.data.split("|")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()
    ans = await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –∞—É–¥–∏–æ
        file_path = download_youtube_audio(url)
        await ans.delete()
        await call.message.answer_document(FSInputFile(file_path))
    except Exception as e:
        await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await call.answer()


@router.callback_query(lambda call: call.data.startswith("yt_video"))
async def handle_youtube_video(call: CallbackQuery):
    _, url = call.data.split("|")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await call.message.delete()
    ans = await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ...")

    try:
        yt_info = get_youtube_info(url)
        if yt_info and "resolutions" in yt_info:
            buttons = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text=f"{res}p", callback_data=f"yt_res|{url}|{res}"
                        )
                        for res in yt_info["resolutions"]
                    ]
                ]
            )
            await call.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:",
                reply_markup=buttons,
            )
        else:
            await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ.")
    except Exception as e:
        await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await call.answer()


@router.callback_query(lambda call: call.data.startswith("yt_res"))
async def handle_youtube_video_resolution(call: CallbackQuery):
    _, url, resolution = call.data.split("|")
    file_path = download_youtube_video(url, resolution)
    await call.message.answer_document(FSInputFile(file_path))
    await call.answer()


@router.callback_query(lambda call: call.data.startswith("inst_audio"))
async def handle_instagram_audio(call: CallbackQuery, state: FSMContext):
    _, short_url = call.data.split("|")
    data = await state.get_data()
    original_url = data.get(short_url)

    if not original_url:
        await call.message.reply("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await call.answer()
        return

    await call.message.delete()
    ans = await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_path = download_instagram_video(original_url)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        audio_path = extract_audio_from_video(video_path)

        if audio_path:
            await ans.delete()
            await call.message.answer_document(FSInputFile(audio_path))
        else:
            await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ.")
    except Exception as e:
        await call.message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if 'video_path' in locals() and video_path:
            delete_file(video_path)
        if 'audio_path' in locals() and audio_path:
            delete_file(audio_path)
        await call.answer()


@router.callback_query(lambda call: call.data.startswith("inst_audio"))
async def handle_instagram_audio(call: CallbackQuery, state: FSMContext):
    _, short_url = call.data.split("|")
    data = await state.get_data()
    original_url = data.get(short_url)

    if not original_url:
        await call.message.reply("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await call.answer()
        return

    await call.message.delete()
    ans = await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—É–¥–∏–æ...")

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ
        video_path = download_instagram_video(original_url)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ
        audio_path = extract_audio_from_video(video_path)

        if audio_path:
            await ans.delete()
            await call.message.answer_document(FSInputFile(audio_path))
        else:
            await call.message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—É–¥–∏–æ –∏–∑ –≤–∏–¥–µ–æ.")
    except Exception as e:
        await call.message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        if 'video_path' in locals() and video_path:
            delete_file(video_path)
        if 'audio_path' in locals() and audio_path:
            delete_file(audio_path)
        await call.answer()
